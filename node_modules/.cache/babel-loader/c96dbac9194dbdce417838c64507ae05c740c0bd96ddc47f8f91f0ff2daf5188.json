{"ast":null,"code":"let keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nexport default {\n  encode: function (input) {\n    var output = \"\";\n    var chr1,\n      chr2,\n      chr3 = \"\";\n    var enc1,\n      enc2,\n      enc3,\n      enc4 = \"\";\n    var i = 0;\n    do {\n      chr1 = input.charCodeAt(i++);\n      chr2 = input.charCodeAt(i++);\n      chr3 = input.charCodeAt(i++);\n      enc1 = chr1 >> 2;\n      enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n      enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n      enc4 = chr3 & 63;\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n      output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n      chr1 = chr2 = chr3 = \"\";\n      enc1 = enc2 = enc3 = enc4 = \"\";\n    } while (i < input.length);\n    return output;\n  },\n  decode: function (input) {\n    var output = \"\";\n    var chr1,\n      chr2,\n      chr3 = \"\";\n    var enc1,\n      enc2,\n      enc3,\n      enc4 = \"\";\n    var i = 0;\n\n    // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n    var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n    if (base64test.exec(input)) {\n      window.alert(\"There were invalid base64 characters in the input text.\\n\" + \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\\n\" + \"Expect errors in decoding.\");\n    }\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n    do {\n      enc1 = keyStr.indexOf(input.charAt(i++));\n      enc2 = keyStr.indexOf(input.charAt(i++));\n      enc3 = keyStr.indexOf(input.charAt(i++));\n      enc4 = keyStr.indexOf(input.charAt(i++));\n      chr1 = enc1 << 2 | enc2 >> 4;\n      chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n      chr3 = (enc3 & 3) << 6 | enc4;\n      output = output + String.fromCharCode(chr1);\n      if (enc3 != 64) {\n        output = output + String.fromCharCode(chr2);\n      }\n      if (enc4 != 64) {\n        output = output + String.fromCharCode(chr3);\n      }\n      chr1 = chr2 = chr3 = \"\";\n      enc1 = enc2 = enc3 = enc4 = \"\";\n    } while (i < input.length);\n    return output;\n  }\n};","map":{"version":3,"names":["keyStr","encode","input","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","i","charCodeAt","isNaN","charAt","length","decode","base64test","exec","window","alert","replace","indexOf","String","fromCharCode"],"sources":["/Users/amani/Documents/7-team/node_modules/react-native-base64/base64.js"],"sourcesContent":["let keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\nexport default {\r\n    encode: function(input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            output = output +\r\n                keyStr.charAt(enc1) +\r\n                keyStr.charAt(enc2) +\r\n                keyStr.charAt(enc3) +\r\n                keyStr.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return output;\r\n    },\r\n\r\n    decode: function(input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\r\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\r\n        if (base64test.exec(input)) {\r\n            window.alert(\"There were invalid base64 characters in the input text.\\n\" +\r\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\\n\" +\r\n                \"Expect errors in decoding.\");\r\n        }\r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n\r\n        do {\r\n            enc1 = keyStr.indexOf(input.charAt(i++));\r\n            enc2 = keyStr.indexOf(input.charAt(i++));\r\n            enc3 = keyStr.indexOf(input.charAt(i++));\r\n            enc4 = keyStr.indexOf(input.charAt(i++));\r\n\r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n            output = output + String.fromCharCode(chr1);\r\n\r\n            if (enc3 != 64) {\r\n                output = output + String.fromCharCode(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n                output = output + String.fromCharCode(chr3);\r\n            }\r\n\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n\r\n        } while (i < input.length);\r\n\r\n        return output;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}