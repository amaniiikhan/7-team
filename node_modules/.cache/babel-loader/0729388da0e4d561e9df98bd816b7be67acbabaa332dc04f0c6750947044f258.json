{"ast":null,"code":"import invariant from 'invariant';\nimport { NativeModules, Platform } from 'react-native';\nimport base64 from 'react-native-base64';\nconst {\n  RNAppAuth\n} = NativeModules;\nconst validateIssuerOrServiceConfigurationEndpoints = (issuer, serviceConfiguration) => invariant(typeof issuer === 'string' || serviceConfiguration && typeof serviceConfiguration.authorizationEndpoint === 'string' && typeof serviceConfiguration.tokenEndpoint === 'string', 'Config error: you must provide either an issuer or a service endpoints');\nconst validateIssuerOrServiceConfigurationRegistrationEndpoint = (issuer, serviceConfiguration) => invariant(typeof issuer === 'string' || serviceConfiguration && typeof serviceConfiguration.registrationEndpoint === 'string', 'Config error: you must provide either an issuer or a registration endpoint');\nconst validateIssuerOrServiceConfigurationRevocationEndpoint = (issuer, serviceConfiguration) => invariant(typeof issuer === 'string' || serviceConfiguration && typeof serviceConfiguration.revocationEndpoint === 'string', 'Config error: you must provide either an issuer or a revocation endpoint');\nconst validateIssuerOrServiceConfigurationEndSessionEndpoint = (issuer, serviceConfiguration) => invariant(typeof issuer === 'string' || serviceConfiguration && typeof serviceConfiguration.endSessionEndpoint === 'string', 'Config error: you must provide either an issuer or an end session endpoint');\nconst validateClientId = clientId => invariant(typeof clientId === 'string', 'Config error: clientId must be a string');\nconst validateRedirectUrl = redirectUrl => invariant(typeof redirectUrl === 'string', 'Config error: redirectUrl must be a string');\nconst validateHeaders = headers => {\n  if (!headers) {\n    return;\n  }\n  const customHeaderTypeErrorMessage = 'Config error: customHeaders type must be { token?: { [key: string]: string }, authorize?: { [key: string]: string }, register: { [key: string]: string }}';\n  const authorizedKeys = ['token', 'authorize', 'register'];\n  const keys = Object.keys(headers);\n  const correctKeys = keys.filter(key => authorizedKeys.includes(key));\n  invariant(keys.length <= authorizedKeys.length && correctKeys.length > 0 && correctKeys.length === keys.length, customHeaderTypeErrorMessage);\n  Object.values(headers).forEach(value => {\n    invariant(typeof value === 'object', customHeaderTypeErrorMessage);\n    invariant(Object.values(value).filter(key => typeof key !== 'string').length === 0, customHeaderTypeErrorMessage);\n  });\n};\nconst validateAdditionalHeaders = headers => {\n  if (!headers) {\n    return;\n  }\n  const errorMessage = 'Config error: additionalHeaders must be { [key: string]: string }';\n  invariant(typeof headers === 'object', errorMessage);\n  invariant(Object.values(headers).filter(key => typeof key !== 'string').length === 0, errorMessage);\n};\nconst validateConnectionTimeoutSeconds = timeout => {\n  if (!timeout) {\n    return;\n  }\n  invariant(typeof timeout === 'number', 'Config error: connectionTimeoutSeconds must be a number');\n};\nexport const SECOND_IN_MS = 1000;\nexport const DEFAULT_TIMEOUT_IOS = 60;\nexport const DEFAULT_TIMEOUT_ANDROID = 15;\nconst convertTimeoutForPlatform = (platform, connectionTimeout = Platform.OS === 'ios' ? DEFAULT_TIMEOUT_IOS : DEFAULT_TIMEOUT_ANDROID) => platform === 'android' ? connectionTimeout * SECOND_IN_MS : connectionTimeout;\nexport const prefetchConfiguration = async ({\n  warmAndPrefetchChrome = false,\n  issuer,\n  redirectUrl,\n  clientId,\n  scopes,\n  serviceConfiguration,\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n  connectionTimeoutSeconds\n}) => {\n  if (Platform.OS === 'android') {\n    validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n    validateClientId(clientId);\n    validateRedirectUrl(redirectUrl);\n    validateHeaders(customHeaders);\n    validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n    const nativeMethodArguments = [warmAndPrefetchChrome, issuer, redirectUrl, clientId, scopes, serviceConfiguration, dangerouslyAllowInsecureHttpRequests, customHeaders, convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds)];\n    RNAppAuth.prefetchConfiguration(...nativeMethodArguments);\n  }\n};\nexport const register = ({\n  issuer,\n  redirectUrls,\n  responseTypes,\n  grantTypes,\n  subjectType,\n  tokenEndpointAuthMethod,\n  additionalParameters,\n  serviceConfiguration,\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n  additionalHeaders,\n  connectionTimeoutSeconds\n}) => {\n  validateIssuerOrServiceConfigurationRegistrationEndpoint(issuer, serviceConfiguration);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n  invariant(Array.isArray(redirectUrls) && redirectUrls.every(url => typeof url === 'string'), 'Config error: redirectUrls must be an Array of strings');\n  invariant(responseTypes == null || Array.isArray(responseTypes) && responseTypes.every(rt => typeof rt === 'string'), 'Config error: if provided, responseTypes must be an Array of strings');\n  invariant(grantTypes == null || Array.isArray(grantTypes) && grantTypes.every(gt => typeof gt === 'string'), 'Config error: if provided, grantTypes must be an Array of strings');\n  invariant(subjectType == null || typeof subjectType === 'string', 'Config error: if provided, subjectType must be a string');\n  invariant(tokenEndpointAuthMethod == null || typeof tokenEndpointAuthMethod === 'string', 'Config error: if provided, tokenEndpointAuthMethod must be a string');\n  const nativeMethodArguments = [issuer, redirectUrls, responseTypes, grantTypes, subjectType, tokenEndpointAuthMethod, additionalParameters, serviceConfiguration, convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds)];\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n  }\n  return RNAppAuth.register(...nativeMethodArguments);\n};\nexport const authorize = ({\n  issuer,\n  redirectUrl,\n  clientId,\n  clientSecret,\n  scopes,\n  useNonce = true,\n  usePKCE = true,\n  additionalParameters,\n  serviceConfiguration,\n  clientAuthMethod = 'basic',\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n  additionalHeaders,\n  skipCodeExchange = false,\n  iosCustomBrowser = null,\n  androidAllowCustomBrowsers = null,\n  androidTrustedWebActivity = false,\n  connectionTimeoutSeconds,\n  iosPrefersEphemeralSession = false\n}) => {\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n  // TODO: validateAdditionalParameters\n\n  const nativeMethodArguments = [issuer, redirectUrl, clientId, clientSecret, scopes, additionalParameters, serviceConfiguration, skipCodeExchange, convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds)];\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(useNonce);\n    nativeMethodArguments.push(usePKCE);\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n    nativeMethodArguments.push(androidAllowCustomBrowsers);\n    nativeMethodArguments.push(androidTrustedWebActivity);\n  }\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n    nativeMethodArguments.push(useNonce);\n    nativeMethodArguments.push(usePKCE);\n    nativeMethodArguments.push(iosCustomBrowser);\n    nativeMethodArguments.push(iosPrefersEphemeralSession);\n  }\n  return RNAppAuth.authorize(...nativeMethodArguments);\n};\nexport const refresh = ({\n  issuer,\n  redirectUrl,\n  clientId,\n  clientSecret,\n  scopes,\n  additionalParameters = {},\n  serviceConfiguration,\n  clientAuthMethod = 'basic',\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n  additionalHeaders,\n  iosCustomBrowser = null,\n  androidAllowCustomBrowsers = null,\n  connectionTimeoutSeconds\n}, {\n  refreshToken\n}) => {\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n  invariant(refreshToken, 'Please pass in a refresh token');\n  // TODO: validateAdditionalParameters\n\n  const nativeMethodArguments = [issuer, redirectUrl, clientId, clientSecret, refreshToken, scopes, additionalParameters, serviceConfiguration, convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds)];\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n    nativeMethodArguments.push(androidAllowCustomBrowsers);\n  }\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n    nativeMethodArguments.push(iosCustomBrowser);\n  }\n  return RNAppAuth.refresh(...nativeMethodArguments);\n};\nexport const revoke = async ({\n  clientId,\n  issuer,\n  serviceConfiguration,\n  clientSecret\n}, {\n  tokenToRevoke,\n  sendClientId = false,\n  includeBasicAuth = false\n}) => {\n  invariant(tokenToRevoke, 'Please include the token to revoke');\n  validateClientId(clientId);\n  validateIssuerOrServiceConfigurationRevocationEndpoint(issuer, serviceConfiguration);\n  let revocationEndpoint;\n  if (serviceConfiguration && serviceConfiguration.revocationEndpoint) {\n    revocationEndpoint = serviceConfiguration.revocationEndpoint;\n  } else {\n    const response = await fetch(`${issuer}/.well-known/openid-configuration`);\n    const openidConfig = await response.json();\n    invariant(openidConfig.revocation_endpoint, 'The openid config does not specify a revocation endpoint');\n    revocationEndpoint = openidConfig.revocation_endpoint;\n  }\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  if (includeBasicAuth) {\n    headers.Authorization = `Basic ${base64.encode(`${clientId}:${clientSecret}`)}`;\n  }\n  /**\n    Identity Server insists on client_id being passed in the body,\n    but Google does not. According to the spec, Google is right\n    so defaulting to no client_id\n    https://tools.ietf.org/html/rfc7009#section-2.1\n  **/\n  return await fetch(revocationEndpoint, {\n    method: 'POST',\n    headers,\n    body: `token=${tokenToRevoke}${sendClientId ? `&client_id=${clientId}` : ''}`\n  }).catch(error => {\n    throw new Error('Failed to revoke token', error);\n  });\n};\nexport const logout = ({\n  issuer,\n  serviceConfiguration,\n  additionalParameters,\n  dangerouslyAllowInsecureHttpRequests = false,\n  iosCustomBrowser = null,\n  iosPrefersEphemeralSession = false,\n  androidAllowCustomBrowsers = null\n}, {\n  idToken,\n  postLogoutRedirectUrl\n}) => {\n  validateIssuerOrServiceConfigurationEndSessionEndpoint(issuer, serviceConfiguration);\n  validateRedirectUrl(postLogoutRedirectUrl);\n  invariant(idToken, 'Please pass in the ID token');\n  const nativeMethodArguments = [issuer, idToken, postLogoutRedirectUrl, serviceConfiguration, additionalParameters];\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(androidAllowCustomBrowsers);\n  }\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(iosCustomBrowser);\n    nativeMethodArguments.push(iosPrefersEphemeralSession);\n  }\n  return RNAppAuth.logout(...nativeMethodArguments);\n};","map":{"version":3,"names":["invariant","NativeModules","Platform","base64","RNAppAuth","validateIssuerOrServiceConfigurationEndpoints","issuer","serviceConfiguration","authorizationEndpoint","tokenEndpoint","validateIssuerOrServiceConfigurationRegistrationEndpoint","registrationEndpoint","validateIssuerOrServiceConfigurationRevocationEndpoint","revocationEndpoint","validateIssuerOrServiceConfigurationEndSessionEndpoint","endSessionEndpoint","validateClientId","clientId","validateRedirectUrl","redirectUrl","validateHeaders","headers","customHeaderTypeErrorMessage","authorizedKeys","keys","Object","correctKeys","filter","key","includes","length","values","forEach","value","validateAdditionalHeaders","errorMessage","validateConnectionTimeoutSeconds","timeout","SECOND_IN_MS","DEFAULT_TIMEOUT_IOS","DEFAULT_TIMEOUT_ANDROID","convertTimeoutForPlatform","platform","connectionTimeout","OS","prefetchConfiguration","warmAndPrefetchChrome","scopes","dangerouslyAllowInsecureHttpRequests","customHeaders","connectionTimeoutSeconds","nativeMethodArguments","register","redirectUrls","responseTypes","grantTypes","subjectType","tokenEndpointAuthMethod","additionalParameters","additionalHeaders","Array","isArray","every","url","rt","gt","push","authorize","clientSecret","useNonce","usePKCE","clientAuthMethod","skipCodeExchange","iosCustomBrowser","androidAllowCustomBrowsers","androidTrustedWebActivity","iosPrefersEphemeralSession","refresh","refreshToken","revoke","tokenToRevoke","sendClientId","includeBasicAuth","response","fetch","openidConfig","json","revocation_endpoint","Authorization","encode","method","body","catch","error","Error","logout","idToken","postLogoutRedirectUrl"],"sources":["/Users/amani/Documents/7-team/node_modules/react-native-app-auth/index.js"],"sourcesContent":["import invariant from 'invariant';\nimport { NativeModules, Platform } from 'react-native';\nimport base64 from 'react-native-base64';\n\nconst { RNAppAuth } = NativeModules;\n\nconst validateIssuerOrServiceConfigurationEndpoints = (issuer, serviceConfiguration) =>\n  invariant(\n    typeof issuer === 'string' ||\n      (serviceConfiguration &&\n        typeof serviceConfiguration.authorizationEndpoint === 'string' &&\n        typeof serviceConfiguration.tokenEndpoint === 'string'),\n    'Config error: you must provide either an issuer or a service endpoints'\n  );\nconst validateIssuerOrServiceConfigurationRegistrationEndpoint = (issuer, serviceConfiguration) =>\n  invariant(\n    typeof issuer === 'string' ||\n      (serviceConfiguration && typeof serviceConfiguration.registrationEndpoint === 'string'),\n    'Config error: you must provide either an issuer or a registration endpoint'\n  );\nconst validateIssuerOrServiceConfigurationRevocationEndpoint = (issuer, serviceConfiguration) =>\n  invariant(\n    typeof issuer === 'string' ||\n      (serviceConfiguration && typeof serviceConfiguration.revocationEndpoint === 'string'),\n    'Config error: you must provide either an issuer or a revocation endpoint'\n  );\nconst validateIssuerOrServiceConfigurationEndSessionEndpoint = (issuer, serviceConfiguration) =>\n  invariant(\n    typeof issuer === 'string' ||\n      (serviceConfiguration && typeof serviceConfiguration.endSessionEndpoint === 'string'),\n    'Config error: you must provide either an issuer or an end session endpoint'\n  );\nconst validateClientId = clientId =>\n  invariant(typeof clientId === 'string', 'Config error: clientId must be a string');\nconst validateRedirectUrl = redirectUrl =>\n  invariant(typeof redirectUrl === 'string', 'Config error: redirectUrl must be a string');\n\nconst validateHeaders = headers => {\n  if (!headers) {\n    return;\n  }\n  const customHeaderTypeErrorMessage =\n    'Config error: customHeaders type must be { token?: { [key: string]: string }, authorize?: { [key: string]: string }, register: { [key: string]: string }}';\n\n  const authorizedKeys = ['token', 'authorize', 'register'];\n  const keys = Object.keys(headers);\n  const correctKeys = keys.filter(key => authorizedKeys.includes(key));\n  invariant(\n    keys.length <= authorizedKeys.length &&\n      correctKeys.length > 0 &&\n      correctKeys.length === keys.length,\n    customHeaderTypeErrorMessage\n  );\n\n  Object.values(headers).forEach(value => {\n    invariant(typeof value === 'object', customHeaderTypeErrorMessage);\n    invariant(\n      Object.values(value).filter(key => typeof key !== 'string').length === 0,\n      customHeaderTypeErrorMessage\n    );\n  });\n};\n\nconst validateAdditionalHeaders = headers => {\n  if (!headers) {\n    return;\n  }\n\n  const errorMessage = 'Config error: additionalHeaders must be { [key: string]: string }';\n\n  invariant(typeof headers === 'object', errorMessage);\n  invariant(\n    Object.values(headers).filter(key => typeof key !== 'string').length === 0,\n    errorMessage\n  );\n};\n\nconst validateConnectionTimeoutSeconds = timeout => {\n  if (!timeout) {\n    return;\n  }\n\n  invariant(typeof timeout === 'number', 'Config error: connectionTimeoutSeconds must be a number');\n};\n\nexport const SECOND_IN_MS = 1000;\nexport const DEFAULT_TIMEOUT_IOS = 60;\nexport const DEFAULT_TIMEOUT_ANDROID = 15;\n\nconst convertTimeoutForPlatform = (\n  platform,\n  connectionTimeout = Platform.OS === 'ios' ? DEFAULT_TIMEOUT_IOS : DEFAULT_TIMEOUT_ANDROID\n) => (platform === 'android' ? connectionTimeout * SECOND_IN_MS : connectionTimeout);\n\nexport const prefetchConfiguration = async ({\n  warmAndPrefetchChrome = false,\n  issuer,\n  redirectUrl,\n  clientId,\n  scopes,\n  serviceConfiguration,\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n  connectionTimeoutSeconds,\n}) => {\n  if (Platform.OS === 'android') {\n    validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n    validateClientId(clientId);\n    validateRedirectUrl(redirectUrl);\n    validateHeaders(customHeaders);\n    validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n\n    const nativeMethodArguments = [\n      warmAndPrefetchChrome,\n      issuer,\n      redirectUrl,\n      clientId,\n      scopes,\n      serviceConfiguration,\n      dangerouslyAllowInsecureHttpRequests,\n      customHeaders,\n      convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds),\n    ];\n\n    RNAppAuth.prefetchConfiguration(...nativeMethodArguments);\n  }\n};\n\nexport const register = ({\n  issuer,\n  redirectUrls,\n  responseTypes,\n  grantTypes,\n  subjectType,\n  tokenEndpointAuthMethod,\n  additionalParameters,\n  serviceConfiguration,\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n  additionalHeaders,\n  connectionTimeoutSeconds,\n}) => {\n  validateIssuerOrServiceConfigurationRegistrationEndpoint(issuer, serviceConfiguration);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n\n  invariant(\n    Array.isArray(redirectUrls) && redirectUrls.every(url => typeof url === 'string'),\n    'Config error: redirectUrls must be an Array of strings'\n  );\n  invariant(\n    responseTypes == null ||\n      (Array.isArray(responseTypes) && responseTypes.every(rt => typeof rt === 'string')),\n    'Config error: if provided, responseTypes must be an Array of strings'\n  );\n  invariant(\n    grantTypes == null ||\n      (Array.isArray(grantTypes) && grantTypes.every(gt => typeof gt === 'string')),\n    'Config error: if provided, grantTypes must be an Array of strings'\n  );\n  invariant(\n    subjectType == null || typeof subjectType === 'string',\n    'Config error: if provided, subjectType must be a string'\n  );\n  invariant(\n    tokenEndpointAuthMethod == null || typeof tokenEndpointAuthMethod === 'string',\n    'Config error: if provided, tokenEndpointAuthMethod must be a string'\n  );\n\n  const nativeMethodArguments = [\n    issuer,\n    redirectUrls,\n    responseTypes,\n    grantTypes,\n    subjectType,\n    tokenEndpointAuthMethod,\n    additionalParameters,\n    serviceConfiguration,\n    convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds),\n  ];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n  }\n\n  return RNAppAuth.register(...nativeMethodArguments);\n};\n\nexport const authorize = ({\n  issuer,\n  redirectUrl,\n  clientId,\n  clientSecret,\n  scopes,\n  useNonce = true,\n  usePKCE = true,\n  additionalParameters,\n  serviceConfiguration,\n  clientAuthMethod = 'basic',\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n  additionalHeaders,\n  skipCodeExchange = false,\n  iosCustomBrowser = null,\n  androidAllowCustomBrowsers = null,\n  androidTrustedWebActivity = false,\n  connectionTimeoutSeconds,\n  iosPrefersEphemeralSession = false,\n}) => {\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n  // TODO: validateAdditionalParameters\n\n  const nativeMethodArguments = [\n    issuer,\n    redirectUrl,\n    clientId,\n    clientSecret,\n    scopes,\n    additionalParameters,\n    serviceConfiguration,\n    skipCodeExchange,\n    convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds),\n  ];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(useNonce);\n    nativeMethodArguments.push(usePKCE);\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n    nativeMethodArguments.push(androidAllowCustomBrowsers);\n    nativeMethodArguments.push(androidTrustedWebActivity);\n  }\n\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n    nativeMethodArguments.push(useNonce);\n    nativeMethodArguments.push(usePKCE);\n    nativeMethodArguments.push(iosCustomBrowser);\n    nativeMethodArguments.push(iosPrefersEphemeralSession);\n  }\n\n  return RNAppAuth.authorize(...nativeMethodArguments);\n};\n\nexport const refresh = (\n  {\n    issuer,\n    redirectUrl,\n    clientId,\n    clientSecret,\n    scopes,\n    additionalParameters = {},\n    serviceConfiguration,\n    clientAuthMethod = 'basic',\n    dangerouslyAllowInsecureHttpRequests = false,\n    customHeaders,\n    additionalHeaders,\n    iosCustomBrowser = null,\n    androidAllowCustomBrowsers = null,\n    connectionTimeoutSeconds,\n  },\n  { refreshToken }\n) => {\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n  invariant(refreshToken, 'Please pass in a refresh token');\n  // TODO: validateAdditionalParameters\n\n  const nativeMethodArguments = [\n    issuer,\n    redirectUrl,\n    clientId,\n    clientSecret,\n    refreshToken,\n    scopes,\n    additionalParameters,\n    serviceConfiguration,\n    convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds),\n  ];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n    nativeMethodArguments.push(androidAllowCustomBrowsers);\n  }\n\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n    nativeMethodArguments.push(iosCustomBrowser);\n  }\n\n  return RNAppAuth.refresh(...nativeMethodArguments);\n};\n\nexport const revoke = async (\n  { clientId, issuer, serviceConfiguration, clientSecret },\n  { tokenToRevoke, sendClientId = false, includeBasicAuth = false }\n) => {\n  invariant(tokenToRevoke, 'Please include the token to revoke');\n  validateClientId(clientId);\n  validateIssuerOrServiceConfigurationRevocationEndpoint(issuer, serviceConfiguration);\n\n  let revocationEndpoint;\n  if (serviceConfiguration && serviceConfiguration.revocationEndpoint) {\n    revocationEndpoint = serviceConfiguration.revocationEndpoint;\n  } else {\n    const response = await fetch(`${issuer}/.well-known/openid-configuration`);\n    const openidConfig = await response.json();\n\n    invariant(\n      openidConfig.revocation_endpoint,\n      'The openid config does not specify a revocation endpoint'\n    );\n\n    revocationEndpoint = openidConfig.revocation_endpoint;\n  }\n\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  };\n  if (includeBasicAuth) {\n    headers.Authorization = `Basic ${base64.encode(`${clientId}:${clientSecret}`)}`;\n  }\n  /**\n    Identity Server insists on client_id being passed in the body,\n    but Google does not. According to the spec, Google is right\n    so defaulting to no client_id\n    https://tools.ietf.org/html/rfc7009#section-2.1\n  **/\n  return await fetch(revocationEndpoint, {\n    method: 'POST',\n    headers,\n    body: `token=${tokenToRevoke}${sendClientId ? `&client_id=${clientId}` : ''}`,\n  }).catch(error => {\n    throw new Error('Failed to revoke token', error);\n  });\n};\n\nexport const logout = (\n  {\n    issuer,\n    serviceConfiguration,\n    additionalParameters,\n    dangerouslyAllowInsecureHttpRequests = false,\n    iosCustomBrowser = null,\n    iosPrefersEphemeralSession = false,\n    androidAllowCustomBrowsers = null,\n  },\n  { idToken, postLogoutRedirectUrl }\n) => {\n  validateIssuerOrServiceConfigurationEndSessionEndpoint(issuer, serviceConfiguration);\n  validateRedirectUrl(postLogoutRedirectUrl);\n  invariant(idToken, 'Please pass in the ID token');\n\n  const nativeMethodArguments = [\n    issuer,\n    idToken,\n    postLogoutRedirectUrl,\n    serviceConfiguration,\n    additionalParameters,\n  ];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(androidAllowCustomBrowsers);\n  }\n\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(iosCustomBrowser);\n    nativeMethodArguments.push(iosPrefersEphemeralSession);\n  }\n\n  return RNAppAuth.logout(...nativeMethodArguments);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}